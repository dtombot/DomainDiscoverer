---
import BaseLayout from '../../layouts/BaseLayout.astro';
const title = 'Admin Dashboard - Email Manager';
const description = 'Send and view emails via Mailgun. Secured by an admin key.';
---
<BaseLayout {title} {description}>
  <section class="container-pad">
    <nav aria-label="Breadcrumb" class="text-sm text-slate-600 mb-3">
      <ol class="flex gap-2 items-center">
        <li><a href="/" class="hover:underline">Home</a></li>
        <li>/</li>
        <li aria-current="page">Admin</li>
      </ol>
    </nav>
    <h1 class="text-3xl font-extrabold mb-4">Admin Email Dashboard</h1>

    <!-- Unlock panel: ONLY this is visible by default -->
    <div id="unlock" class="rounded-2xl border border-slate-200 bg-white/80 backdrop-blur-xl shadow p-4 sm:p-5">
      <div class="text-slate-700 text-sm mb-2">Enter your admin key to unlock.</div>
      <div class="flex flex-col sm:flex-row sm:items-center gap-3">
        <input id="admin-key" type="password" class="flex-1 px-3 py-2 rounded-lg border border-slate-300 bg-white" placeholder="Admin key" />
        <button id="btn-unlock" class="px-4 py-2 rounded-xl bg-slate-900 text-white text-sm font-semibold">Unlock</button>
      </div>
      <div id="unlock-status" class="text-sm text-slate-700 mt-2"></div>
    </div>

    <!-- Admin UI injected only after unlock -->
    <div id="admin-root" class="mt-6"></div>
  </section>

  <!-- Template kept out of DOM so content is not visible until unlocked -->
  <template id="admin-ui">
    <div class="rounded-2xl border border-slate-200 bg-white/80 backdrop-blur-xl shadow p-4 sm:p-5">
      <div class="flex gap-2 mb-4">
        <button id="tab-send" class="px-3 py-2 rounded-lg bg-slate-900 text-white text-sm font-semibold">Send Email</button>
        <button id="tab-inbox" class="px-3 py-2 rounded-lg bg-slate-200 text-slate-900 text-sm font-semibold">Inbox</button>
      </div>
      <div id="panel-send">
        <div class="grid sm:grid-cols-2 gap-3">
          <div>
            <label class="text-sm text-slate-700">To</label>
            <input id="to" type="email" class="w-full px-3 py-2 rounded-lg border border-slate-300 bg-white" placeholder="you@example.com" />
          </div>
          <div>
            <label class="text-sm text-slate-700">Subject</label>
            <input id="subject" type="text" class="w-full px-3 py-2 rounded-lg border border-slate-300 bg-white" placeholder="Subject" />
          </div>
          <div class="sm:col-span-2">
            <label class="text-sm text-slate-700">HTML</label>
            <textarea id="html" class="w-full min-h-[140px] px-3 py-2 rounded-lg border border-slate-300 bg-white" placeholder="<p>Hello</p>"></textarea>
          </div>
        </div>
        <div class="mt-3 flex items-center gap-3">
          <button id="send" class="px-4 py-2 rounded-xl bg-gradient-to-r from-secondary to-primary text-white font-bold">Send</button>
          <div id="send-status" class="text-sm text-slate-700"></div>
        </div>
      </div>
      <div id="panel-inbox" class="hidden">
        <div class="flex items-center gap-2 mb-3">
          <label class="text-sm text-slate-700">Event</label>
          <select id="event" class="px-3 py-2 rounded-lg border border-slate-300 bg-white">
            <option value="stored">stored</option>
            <option value="delivered">delivered</option>
            <option value="accepted">accepted</option>
          </select>
          <button id="refresh" class="px-3 py-2 rounded-lg bg-slate-900 text-white text-sm font-semibold">Refresh</button>
        </div>
        <div id="inbox" class="space-y-2 text-sm"></div>
      </div>
    </div>
  </template>

  <script>
    const KEY_NAME = 'dd_admin_key';
    const unlock = document.getElementById('unlock');
    const keyInput = document.getElementById('admin-key');
    const unlockBtn = document.getElementById('btn-unlock');
    const statusEl = document.getElementById('unlock-status');
    const root = document.getElementById('admin-root');

    const getKey = () => sessionStorage.getItem(KEY_NAME) || '';
    const setKey = (k) => sessionStorage.setItem(KEY_NAME, k);

    async function validateKey(k) {
      try {
        const res = await fetch('/.netlify/functions/admin-list-emails?limit=1', { headers: { 'x-admin-key': k } });
        if (!res.ok) return false;
        const data = await res.json().catch(() => ({}));
        return data && (data.status === 'ok');
      } catch { return false; }
    }

    function mountUI() {
      const tpl = document.getElementById('admin-ui');
      if (!tpl) return;
      root.innerHTML = tpl.innerHTML;
      // Wire UI only after mount
      const tabSend = document.getElementById('tab-send');
      const tabInbox = document.getElementById('tab-inbox');
      const panelSend = document.getElementById('panel-send');
      const panelInbox = document.getElementById('panel-inbox');
      const toEl = document.getElementById('to');
      const subjectEl = document.getElementById('subject');
      const htmlEl = document.getElementById('html');
      const sendBtn = document.getElementById('send');
      const sendStatus = document.getElementById('send-status');
      const inboxEl = document.getElementById('inbox');
      const refreshBtn = document.getElementById('refresh');
      const eventSel = document.getElementById('event');

      tabSend.addEventListener('click', () => {
        tabSend.classList.replace('bg-slate-200','bg-slate-900');
        tabSend.classList.add('text-white');
        tabInbox.classList.replace('bg-slate-900','bg-slate-200');
        tabInbox.classList.remove('text-white');
        panelSend.classList.remove('hidden');
        panelInbox.classList.add('hidden');
      });
      tabInbox.addEventListener('click', () => {
        tabInbox.classList.replace('bg-slate-200','bg-slate-900');
        tabInbox.classList.add('text-white');
        tabSend.classList.replace('bg-slate-900','bg-slate-200');
        tabSend.classList.remove('text-white');
        panelInbox.classList.remove('hidden');
        panelSend.classList.add('hidden');
      });

      sendBtn.addEventListener('click', async () => {
        sendStatus.textContent = 'Sending...';
        try {
          const res = await fetch('/.netlify/functions/admin-send-email', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json', 'x-admin-key': getKey() },
            body: JSON.stringify({ to: toEl.value, subject: subjectEl.value, html: htmlEl.value })
          });
          const data = await res.json();
          sendStatus.textContent = (data && data.status === 'ok') ? 'Sent' : (data && data.message) || 'Error';
        } catch (e) {
          sendStatus.textContent = 'Network error';
        }
      });

      async function loadInbox() {
        inboxEl.textContent = 'Loading...';
        try {
          const res = await fetch(`/.netlify/functions/admin-list-emails?event=${encodeURIComponent(eventSel.value)}`, {
            headers: { 'x-admin-key': getKey() }
          });
          const data = await res.json();
          if (!data || data.status !== 'ok') { inboxEl.textContent = (data && data.message) || 'Error'; return; }
          const items = data.events || [];
          inboxEl.innerHTML = items.map((it) => {
            const ts = it.timestamp ? new Date(it.timestamp * 1000).toLocaleString() : '';
            const from = (it.message && it.message.headers && it.message.headers.from) || (it.envelope && it.envelope.sender) || '';
            const to = (it.message && it.message.headers && it.message.headers.to) || (it.envelope && it.envelope.targets) || '';
            const subject = (it.message && it.message.headers && (it.message.headers.subject || it.message.headers.Subject)) || '';
            return `<div class="rounded-xl border border-slate-200 bg-white/70 p-3"><div class="text-slate-500 text-xs">${ts}</div><div class="font-semibold">${subject}</div><div class="text-slate-600">From: ${from}</div><div class="text-slate-600">To: ${to}</div></div>`;
          }).join('');
        } catch (e) {
          inboxEl.textContent = 'Network error';
        }
      }
      refreshBtn.addEventListener('click', loadInbox);
    }

    async function tryAutoUnlock() {
      const k = getKey();
      if (!k) return;
      statusEl.textContent = 'Validating...';
      const ok = await validateKey(k);
      if (ok) {
        unlock.classList.add('hidden');
        mountUI();
      } else {
        statusEl.textContent = 'Invalid key';
      }
    }

    unlockBtn.addEventListener('click', async () => {
      const k = keyInput.value.trim();
      if (!k) { statusEl.textContent = 'Enter a key'; return; }
      statusEl.textContent = 'Validating...';
      const ok = await validateKey(k);
      if (ok) {
        setKey(k);
        unlock.classList.add('hidden');
        mountUI();
      } else {
        statusEl.textContent = 'Invalid key';
      }
    });

    tryAutoUnlock();
  </script>
</BaseLayout>

